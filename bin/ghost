#!/usr/bin/env ruby
#
#  Created by Bodaniel Jeanes on 2008-8-19.
#  Copyright (c) 2008. All rights reserved.

# test with ruby -Ilib -rubygems bin/ghost

require 'ghost'

def help_text(exit_code = 0)
  script_name = File.basename $0
  puts """USAGE: #{script_name} add <hostname> [<ip=127.0.1.1>]
       #{script_name} modify <hostname> <ip> OR <hostname> (will lookup ip)
       #{script_name} delete <hostname>
       #{script_name} delete_matching <pattern>
       #{script_name} list
       #{script_name} empty
       #{script_name} export
       #{script_name} import <file>
"""
  exit(exit_code)
end

if ARGV.size.zero? || ['-h', '--help', 'help'].include?(ARGV.first)
  help_text
else  
  case ARGV[0]
  when 'add'
    if [2,3].include?(ARGV.size)
      begin
        ARGV.shift
        host = Ghost::Host.adapter.add(*ARGV)
        puts "  [Adding] #{host.name} -> #{host.ip}"
        exit 0
      rescue SocketError
        $stderr.puts "Cannot find ip for host"
        exit 3
      rescue StandardError
        $stderr.puts "Cannot overwrite an existing entry. Use the modify subcommand"
        exit 3
      end
    else
      $stderr.puts "The add subcommand requires at least a hostname.\n\n"
      help_text 2
    end
  when 'modify'
    if ARGV.size == 3
      ARGV.shift
      ARGV << true
      host = Ghost::Host.adapter.add(*ARGV)
      puts "  [Modifying] #{host.name} -> #{host.ip}"
      exit 0
    else
      $stderr.puts "The modify subcommand requires a hostname and an IP.\n\n"
      help_text 4
    end
  when 'delete', 'del', 'remove', 'rm'
    if ARGV.size == 2
      Ghost::Host.adapter.delete(ARGV[1])
      puts "  [Deleting] #{ARGV[1]}"
      exit 0
    else  
      $stderr.puts "The delete subcommand requires a hostname.\n\n"
      help_text 2
    end
  when 'delete_matching'
    if ARGV.size == 2
      matched = Ghost::Host.adapter.delete_matching(ARGV[1])
      if matched.empty?
        puts "  No matching entries found"
      else
        matched.each { |h| puts "  [Deleting] #{h}" }
      end
      exit 0
    else  
      $stderr.puts "The delete_matching subcommand requires a hostname pattern.\n\n"
      help_text 2
    end
  when 'list'
    hosts = Ghost::Host.adapter.list
    pad = hosts.max{|a,b| a.to_s.length <=> b.to_s.length }.to_s.length
    
    puts "Listing #{hosts.size} host(s):"
    
    hosts.each do |h|
      puts "#{h.name.rjust(pad+2)} -> #{h.ip}"
    end
    exit 0
  when 'empty'
    print "  [Emptying] "
    Ghost::Host.adapter.empty!
    puts "Done."
    exit 0
  when 'export'
    hosts = Ghost::Host.adapter.list
    hosts.each do |h|
      puts "#{h.name} #{h.ip}"
    end
    exit 0
  when 'import'
    if ARGV.size == 2
      begin
        File.foreach(ARGV[1]) do |line|
          host_infos = line.strip.split(' ', 2)
          host = Ghost::Host.adapter.add(*host_infos)
          puts "  [Adding] #{host.name} -> #{host.ip}"
        end
        exit 0
      rescue
        $stderr.puts "Cannot import. A problem occured while opening the import file."
        exit 5
      end
    else
      $stderr.puts "The import command requires an input file.\n\n"
      help_text 6
    end
  else
    $stderr.puts "Invalid option: #{ARGV[0]}"
    help_text 1
  end
end
